From de7da1e606da9bd9de6d73add14e0ed7801236fe Mon Sep 17 00:00:00 2001
From: Maksym Kokhan <max.kokhan.94@gmail.com>
Date: Mon, 18 May 2020 19:50:19 +0300
Subject: [PATCH] add my syscall for Illia homework

---
 arch/arm/tools/syscall.tbl        |  1 +
 include/linux/my_syscall.h        | 34 +++++++++++++
 include/linux/syscalls.h          |  1 +
 include/uapi/asm-generic/unistd.h |  5 +-
 kernel/Makefile                   |  2 +-
 kernel/my_syscall.c               | 80 +++++++++++++++++++++++++++++++
 6 files changed, 121 insertions(+), 2 deletions(-)
 create mode 100644 include/linux/my_syscall.h
 create mode 100644 kernel/my_syscall.c

diff --git a/arch/arm/tools/syscall.tbl b/arch/arm/tools/syscall.tbl
index 4d1cf74a2caa..71f15394bc5b 100644
--- a/arch/arm/tools/syscall.tbl
+++ b/arch/arm/tools/syscall.tbl
@@ -451,3 +451,4 @@
 435	common	clone3				sys_clone3
 437	common	openat2				sys_openat2
 438	common	pidfd_getfd			sys_pidfd_getfd
+440	common	my_syscall			sys_my_syscall
diff --git a/include/linux/my_syscall.h b/include/linux/my_syscall.h
new file mode 100644
index 000000000000..2b7f0e7db8de
--- /dev/null
+++ b/include/linux/my_syscall.h
@@ -0,0 +1,34 @@
+enum my_syscall_api_ver {
+	MY_SYS_API_VER_1 = 1,
+	MY_SYS_API_VER_2 = 2,
+};
+
+typedef struct {
+	size_t len;
+	char str[0];
+} my_string_t;
+
+// input data structure - API version 1:
+struct my_syscall_in_data {
+	my_string_t *name;
+	unsigned int val;
+};
+
+// Input data structure - API version 2:
+struct my_syscall_in_data2 {
+	my_string_t *name;
+	unsigned int val;
+	unsigned int val2;
+};
+
+// Output data structure - API version 1:
+struct my_syscall_out_data {
+	unsigned int data;
+};
+
+// Output data structure - API version 2:
+struct my_syscall_out_data2 {
+	unsigned int data;
+	unsigned long data2;
+};
+
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 1815065d52f3..6ae82b6b9c14 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1004,6 +1004,7 @@ asmlinkage long sys_pidfd_send_signal(int pidfd, int sig,
 				       unsigned int flags);
 asmlinkage long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);
 
+asmlinkage long sys_my_syscall(int api_ver, void *in_data, void *out_data);
 /*
  * Architecture-specific system calls
  */
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 3a3201e4618e..f20a57c0a276 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -856,8 +856,11 @@ __SYSCALL(__NR_openat2, sys_openat2)
 #define __NR_pidfd_getfd 438
 __SYSCALL(__NR_pidfd_getfd, sys_pidfd_getfd)
 
+#define __NR_my_syscall 440
+__SYSCALL(__NR_my_syscall, sys_my_syscall)
+
 #undef __NR_syscalls
-#define __NR_syscalls 439
+#define __NR_syscalls 440
 
 /*
  * 32 bit systems traditionally used different
diff --git a/kernel/Makefile b/kernel/Makefile
index 4cb4130ced32..ffe500ded308 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o
+	    async.o range.o smpboot.o ucount.o my_syscall.o
 
 obj-$(CONFIG_MODULES) += kmod.o
 obj-$(CONFIG_MULTIUSER) += groups.o
diff --git a/kernel/my_syscall.c b/kernel/my_syscall.c
new file mode 100644
index 000000000000..381b0019b87d
--- /dev/null
+++ b/kernel/my_syscall.c
@@ -0,0 +1,80 @@
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <linux/syscalls.h>
+#include <linux/my_syscall.h>
+
+static unsigned long api_1_count = 0;
+static unsigned long api_2_count = 0;
+
+SYSCALL_DEFINE3(my_syscall, int, api_ver, void *, in_data,
+		void *, out_data)
+{
+	my_string_t *in_name;
+	unsigned int in_name_len;
+	char *in_name_str;
+	unsigned int in_val;
+	unsigned int in_val2;
+	unsigned int out_val;
+	unsigned int out_val2;
+
+	//unsigned int out_buf_len = ((struct my_syscall_out_data *)out_data)->name->len
+
+	
+	if (api_ver != MY_SYS_API_VER_1 && api_ver != MY_SYS_API_VER_2)
+		return -EOPNOTSUPP;
+
+	if (api_ver == MY_SYS_API_VER_1) {
+		if(get_user(in_name, &((struct my_syscall_in_data *)in_data)->name))
+			goto error;
+		if(get_user(in_name_len, &in_name->len))
+			goto error;
+		in_name_str = kmalloc(in_name_len, GFP_KERNEL);
+		if (in_name_str == NULL)
+			goto error;
+		if(copy_from_user(in_name_str, &in_name->str[0], in_name_len) != 0)
+			goto error_free_buf;
+		if(get_user(in_val, &((struct my_syscall_in_data *)in_data)->val))
+			goto error_free_buf;
+
+		pr_info("%s: my_syscall(api ver : %u, { name->str : %s, name->len : %zu, val : %u }\n",
+		__func__, api_ver, in_name_str, in_name_len, in_val);
+		api_1_count++;
+
+		out_val = in_val + 1;
+		if(put_user(out_val, &((struct my_syscall_out_data *)out_data)->data) != 0)
+			goto error_free_buf;
+	} else {
+		if(get_user(in_name, &((struct my_syscall_in_data2 *)in_data)->name))
+			goto error;
+		if(get_user(in_name_len, &in_name->len))
+			goto error;
+		in_name_str = kmalloc(in_name_len, GFP_KERNEL);
+		if (in_name_str == NULL)
+			goto error;
+		if(copy_from_user(in_name_str, &in_name->str[0], in_name_len))
+			goto error_free_buf;
+		if(get_user(in_val, &((struct my_syscall_in_data2 *)in_data)->val))
+		get_user(in_val2, &((struct my_syscall_in_data2 *)in_data)->val2);
+			goto error_free_buf;
+
+		pr_info("%s: my_syscall(api_ver : %u, { name->str : %s, name->len : %zu, val : %u, val2 : %u\n",
+		__func__, api_ver, in_name_str, in_name_len, in_val, in_val2);
+		api_2_count++;
+
+		out_val = in_val + 1;
+		out_val2 = in_val2 + 1;
+		if(put_user(out_val, &((struct my_syscall_out_data2 *)out_data)->data) != 0)
+			goto error_free_buf;
+		if(put_user(out_val2, &((struct my_syscall_out_data2 *)out_data)->data2) != 0)
+			goto error_free_buf;
+	}
+
+	kfree(in_name_str);
+	return 0;
+
+error_free_buf:
+	kfree(in_name_str);
+error:
+	return -EFAULT;
+}
-- 
2.17.1

